// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.0
// source: protobuf.proto

package Gocode

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PbClient is the client API for Pb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PbClient interface {
	Move(ctx context.Context, in *MoveReq, opts ...grpc.CallOption) (*Stat, error)
	Turn(ctx context.Context, in *TurnReq, opts ...grpc.CallOption) (*Stat, error)
	Vacuum(ctx context.Context, in *Power, opts ...grpc.CallOption) (*Stat, error)
	Stats(ctx context.Context, in *Stat, opts ...grpc.CallOption) (*Stat, error)
}

type pbClient struct {
	cc grpc.ClientConnInterface
}

func NewPbClient(cc grpc.ClientConnInterface) PbClient {
	return &pbClient{cc}
}

func (c *pbClient) Move(ctx context.Context, in *MoveReq, opts ...grpc.CallOption) (*Stat, error) {
	out := new(Stat)
	err := c.cc.Invoke(ctx, "/pb/move", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pbClient) Turn(ctx context.Context, in *TurnReq, opts ...grpc.CallOption) (*Stat, error) {
	out := new(Stat)
	err := c.cc.Invoke(ctx, "/pb/turn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pbClient) Vacuum(ctx context.Context, in *Power, opts ...grpc.CallOption) (*Stat, error) {
	out := new(Stat)
	err := c.cc.Invoke(ctx, "/pb/vacuum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pbClient) Stats(ctx context.Context, in *Stat, opts ...grpc.CallOption) (*Stat, error) {
	out := new(Stat)
	err := c.cc.Invoke(ctx, "/pb/stats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PbServer is the server API for Pb service.
// All implementations must embed UnimplementedPbServer
// for forward compatibility
type PbServer interface {
	Move(context.Context, *MoveReq) (*Stat, error)
	Turn(context.Context, *TurnReq) (*Stat, error)
	Vacuum(context.Context, *Power) (*Stat, error)
	Stats(context.Context, *Stat) (*Stat, error)
	mustEmbedUnimplementedPbServer()
}

// UnimplementedPbServer must be embedded to have forward compatible implementations.
type UnimplementedPbServer struct {
}

func (UnimplementedPbServer) Move(context.Context, *MoveReq) (*Stat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}
func (UnimplementedPbServer) Turn(context.Context, *TurnReq) (*Stat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Turn not implemented")
}
func (UnimplementedPbServer) Vacuum(context.Context, *Power) (*Stat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vacuum not implemented")
}
func (UnimplementedPbServer) Stats(context.Context, *Stat) (*Stat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (UnimplementedPbServer) mustEmbedUnimplementedPbServer() {}

// UnsafePbServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PbServer will
// result in compilation errors.
type UnsafePbServer interface {
	mustEmbedUnimplementedPbServer()
}

func RegisterPbServer(s grpc.ServiceRegistrar, srv PbServer) {
	s.RegisterService(&Pb_ServiceDesc, srv)
}

func _Pb_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PbServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb/move",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PbServer).Move(ctx, req.(*MoveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pb_Turn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TurnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PbServer).Turn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb/turn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PbServer).Turn(ctx, req.(*TurnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pb_Vacuum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Power)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PbServer).Vacuum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb/vacuum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PbServer).Vacuum(ctx, req.(*Power))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pb_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Stat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PbServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb/stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PbServer).Stats(ctx, req.(*Stat))
	}
	return interceptor(ctx, in, info, handler)
}

// Pb_ServiceDesc is the grpc.ServiceDesc for Pb service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pb_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb",
	HandlerType: (*PbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "move",
			Handler:    _Pb_Move_Handler,
		},
		{
			MethodName: "turn",
			Handler:    _Pb_Turn_Handler,
		},
		{
			MethodName: "vacuum",
			Handler:    _Pb_Vacuum_Handler,
		},
		{
			MethodName: "stats",
			Handler:    _Pb_Stats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf.proto",
}
